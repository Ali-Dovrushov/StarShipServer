{"version":3,"sources":["modules/login/Login.jsx","modules/REST.js","constants/index.js","modules/login/selectors.js","modules/login/index.js","modules/login/actions.js","modules/messenger/components/message/Message.jsx","websocket/Websocket.js","modules/messenger/Messenger.jsx","modules/messenger/selectors.js","modules/messenger/index.js","modules/messenger/actions.js","modules/mainPage/MainPage.jsx","modules/mainPage/selectors.js","modules/mainPage/index.js","App.js","reportWebVitals.js","manager/login/reducer.js","manager/messenger/reducer.js","roots/rootReducer/rootReducer.js","index.js"],"names":["Login","props","handleSubmit","event","preventDefault","user","fetch","method","headers","body","JSON","stringify","then","response","json","e","console","log","logIn","state","login","result","saveCurrentUser","catch","alert","handleInput","setState","target","value","this","className","onSubmit","children","name","onChange","placeholder","React","PureComponent","Object","defineProperties","LOG_IN","writable","LOG_OUT","SAVE_CURRENT_MESSAGE","getCurrentUserName","currentUser","getCurrentStatus","isLoged","connect","currentUserName","selectors","isUserLoged","dispatch","type","constants","payload","actions","Component","Message","message","memo","WS","onOpen","onClose","getOnMessage","cb","_ws","onmessage","data","parse","sendMessage","send","_host","window","location","origin","replace","WebSocket","onopen","bind","onclose","Messenger","getAllMessagesOnWS","messages","allMessages","saveCurrentMessage","messageData","curMessage","ws","logOut","logOutUser","onClick","length","map","index","getCurrentMessageData","messenger","currentMessageData","MainPage","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","combineReducers","action","store","createStore","rootReducer","ReactDOM","render","document","getElementById","init"],"mappings":"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","file":"static/js/main.f097793b.chunk.js","sourcesContent":["import React from 'react';\nimport './loginStyles.css';\nimport { logIn } from '../REST';\n\nclass Login extends React.PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            login: null,\n        };\n    }\n\n    handleSubmit = event => {\n        event.preventDefault();\n        \n        logIn({ user: this.state.login })\n            .then(result => {\n                if (result) {\n                    const { saveCurrentUser } = this.props;\n\n                    saveCurrentUser(this.state.login);\n                }\n            })\n            .catch(() => alert('This user is already exist'));\n    };\n\n    handleInput = event => {\n        this.setState({\n            login: event.target.value,\n        });\n    };\n\n    render() {\n        const { handleSubmit, handleInput } = this;\n\n        return (\n            <div className='root__auth-container'>\n                <form onSubmit={handleSubmit} className='auth-container__auth-form'>\n                    <span className='auth-form__form-name' children='Authorization' />\n                    <input\n                        name='login'\n                        onChange={handleInput}\n                        placeholder='Please Type userName'\n                        className='auth-form__login-input'\n                    />\n                    <button className='auth-form__submit-button' children='Sign in' />\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","export function addNewMessage(newMessage) {\n    try {\n        return fetch('http://localhost:3002/addMessage', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(newMessage),\n        });\n    } catch (e) {\n        console.log('ERROR', e);\n    }\n}\n\nexport function getAllMessages() {\n    try {\n        return fetch('http://localhost:3002/getAllMessages').then(response => response.json());\n    } catch (e) {\n        console.log('ERROR', e);\n    }\n}\n\nexport function logIn(user) {\n    try {\n        return fetch('http://localhost:3002/logIn', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(user),\n        }).then(response => response.json());\n    } catch (e) {\n        console.log('ERROR', e);\n    }\n}\n\nexport function logOut(user) {\n    try {\n        return fetch('http://localhost:3002/logOut', {\n            method: 'DELETE',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(user),\n        });\n    } catch (e) {\n        console.log('ERROR', e);\n    }\n}\n","const constants = {};\n\nexport default Object.defineProperties(constants, {\n    LOG_IN: { value: 'log_in', writable: false },\n    LOG_OUT: { value: 'log_out', writable: false },\n    SAVE_CURRENT_MESSAGE: { value: 'save_current_message', writable: false }\n})\n","export const getCurrentUserName = state => state.login.currentUser;\nexport const getCurrentStatus = state => state.login.isLoged;\n","import Component from './Login.jsx';\nimport * as actions from './actions';\nimport * as selectors from './selectors';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => ({\n    currentUserName: selectors.getCurrentUserName(state),\n    isUserLoged: selectors.getCurrentStatus(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n    saveCurrentUser: user => dispatch(actions.onSaveCurrentUser(user)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Component);\n","import constants from '../../constants';\n\nexport const onSaveCurrentUser = user => ({\n    type: constants.LOG_IN,\n    payload: user,\n});\n","import React from 'react';\n\nconst Message = (props) => { \n    console.log(props)  \n    return (\n        <li className='chat-window__message'>\n            <span className='message__user-name'>{props.user}</span>\n            <span className='message__user-text'>{props.message}</span>\n        </li>\n    )\n}\n\nexport default React.memo(Message);","export default class WS {\n    constructor() {\n        this._host = window.location.origin.replace(/^http/, 'ws');\n        this._ws = new WebSocket(this._host);\n\n        this._ws.onopen = this.onOpen.bind(this);\n        this._ws.onclose = this.onClose.bind(this);\n    }\n\n    onOpen = () => {\n        console.log('----WEBSOCKET CONNECTED---------');\n    }\n\n    onClose = () => {\n        console.log('----WEBSOCKET DISCONNECTED---------');\n    }\n\n\n    getOnMessage = cb => {\n        this._ws.onmessage = message => {\n            const { data } = message;\n            cb(JSON.parse(data));\n        }\n    }\n\n    sendMessage = message => {\n        this._ws.send(JSON.stringify(message));\n    }\n}","import React from 'react';\nimport './messangerStyled.css';\nimport { getAllMessages, logOut } from '../REST';\n\nimport Message from './components/message/Message.jsx';\n\nimport WS from '../../websocket/Websocket';\n\nexport default class Messenger extends React.PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = { \n            curMessage: null,\n            allMessages: []\n        }\n\n        this.ws = new WS();\n\n        this.ws.getOnMessage(this.getAllMessagesOnWS.bind(this));\n    }\n\n    getAllMessagesOnWS = messages => {\n        console.log('MESSAGES', messages);\n        this.setState({\n            allMessages: messages\n        })\n    }\n\n    handleSubmit = event => {\n        event.preventDefault();\n        \n        const { \n            saveCurrentMessage,\n            currentUserName\n        } = this.props;\n        const messageData = {user: currentUserName, message: this.state.curMessage}\n\n        saveCurrentMessage(messageData);\n        this.ws.sendMessage(messageData);\n    }\n\n    handleInput = event => { \n        this.setState({\n            curMessage: event.target.value\n        });\n    }\n\n    logOut = () => {\n        const { \n            logOutUser,\n            currentUserName \n        } = this.props;\n        \n        logOut({user: currentUserName});\n        logOutUser();\n    }\n\n    render() {\n        const {handleInput, logOut, handleSubmit} = this;\n        const messages = this.state.allMessages;\n\n        return (\n            <div className='root__main-container'>\n                <button onClick={logOut} \n                        className='root__log-out-btn' \n                        children='Log out'\n                />\n                <div className='main-container__chat-section'>\n                    <ul className='chat-section__chat-window'>\n                       {messages.length ? \n                            messages.map((message, index) => \n                                <Message \n                                    key ={index}\n                                    user={message.user} \n                                    message={message.message}\n                                />\n                            ) : null\n                        }\n                    </ul>\n                    <form onSubmit={handleSubmit} className='chat-window__chat-form'>\n                        <input onChange={handleInput} className='chat-form__message-input'/>\n                        <button className='chat-form__submit-button' children='Send'/>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","export const getCurrentUserName = state => state.login.currentUser;\nexport const getCurrentStatus = state => state.login.isLoged;\nexport const getCurrentMessageData = state => state.messenger;\n","import Component from './Messenger.jsx';\nimport * as actions from './actions';\nimport * as selectors from './selectors';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => ({\n    currentUserName: selectors.getCurrentUserName(state),\n    isUserLoged: selectors.getCurrentStatus(state),\n    currentMessageData: selectors.getCurrentMessageData(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n    logOutUser: () => dispatch(actions.onLogOut()),\n    saveCurrentMessage: messageData => dispatch(actions.onSaveMessage(messageData))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Component);","import constants from '../../constants';\n\nexport const onLogOut = payload => ({\n    type: constants.LOG_OUT,\n    payload,\n});\n\nexport const onSaveMessage = messageData => ({\n    type: constants.SAVE_CURRENT_MESSAGE,\n    payload: {\n        user: messageData.user,\n        message: messageData.message\n    }\n})\n","import React from 'react';\nimport Login from '../login';\nimport Messenger from '../messenger';\n\nconst MainPage = props => {\n    const { isUserLoged } = props;\n\n    return (\n        <>\n            {!isUserLoged ? <Login /> : <Messenger />}\n        </>\n    )\n}\n\nexport default React.memo(MainPage);","export const getCurrentStatus = state => state.login.isLoged;","import Component from './MainPage.jsx';\nimport * as selectors from './selectors';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => ({\n    isUserLoged: selectors.getCurrentStatus(state),\n});\n\nexport default connect(mapStateToProps)(Component);\n","import React from 'react';\nimport MainPage from './modules/mainPage';\n\nfunction App() {\n  return (\n      <MainPage/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import constants from '../../constants';\n\nconst initialState = {\n    currentUser: null,\n    isLoged: false\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case constants.LOG_IN:\n            return {\n                ...state,\n                currentUser: action.payload,\n                isLoged: true\n            }\n        case constants.LOG_OUT:\n            return {\n                ...state,\n                currentUser: null,\n                isLoged: false\n            }\n        default:\n            return state;\n    }\n}\n","import constants from '../../constants';\n\nconst initialState = {\n    user: null,\n    message: null\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case constants.SAVE_CURRENT_MESSAGE:\n            return {\n                ...state,\n                user: action.payload.user,\n                message: action.payload.message\n            }\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux';\nimport login from '../../manager/login/reducer';\nimport messenger from '../../manager/messenger/reducer';\n\nexport default combineReducers({\n    login, messenger\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createStore } from 'redux';\nimport rootReducer from './roots/rootReducer/rootReducer';\nimport { Provider } from 'react-redux';\n\n\nfunction init() {\n    const store = createStore(rootReducer)\n    window.store = store;\n\n    ReactDOM.render(\n        <Provider store={store}>\n            <App />\n        </Provider>,\n        document.getElementById('root')\n    );\n}\n\ninit();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}